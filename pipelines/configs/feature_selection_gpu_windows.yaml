# Feature screening execution config - Windows GPU优化版
# 专为Windows环境下GPU加速优化，保持计算质量不降低

# Filter阶段 - CPU密集型，优化并行度
filter: 
  enabled:  true
  params: 
    coverage_threshold:  0.4
    variance_threshold:  1.0e-8
    corr_threshold:  0.97
    vif_threshold:  20
    max_vif_iter:  20
    suffix_dedup:  ['_zn', '_mm']
    ic_targets:  ['target_logreturn', 'target_logsharpe_ratio']
    mi_targets:  ['target_binarytrend', 'target_drawdown_prob', 'target_sideway_detect']
    # Windows优化参数
    n_jobs:  4                # Windows下的安全并行度
    sample_frac:  0.8         # 采样80%数据计算IC/MI，加速但不影响质量
    batch_size:  10000        # 批量处理大小
    chunk_size:  50           # 特征分块处理
  per_channel: 
    base:  {}
    rich:  {}

# Embedded阶段 - GPU加速核心
embedded: 
  enabled:  true
  params: 
    n_estimators:  300        # 保持模型质量
    boruta_iterations:  20    # 保持Boruta质量
    linear_cv:  5
    linear_max_iter:  2000
    sample_cap:  60000
    tree_max_features:  null
    n_jobs:  4                # Windows并行度
    
    # GPU加速配置
    tree_backend:  xgboost    # 优先使用XGBoost GPU
    use_gpu:  true
    gpu_memory_efficient:  true  # GPU内存优化模式
    
    # XGBoost GPU参数（Windows优化，3.0.5版本）
    xgb_params:
      tree_method:  hist      # XGBoost 3.0使用hist
      device:  cuda:0         # 新API使用device
      predictor:  gpu_predictor
      max_bin:  256           # 平衡速度和精度
      subsample:  0.8         # 防止过拟合
      colsample_bytree:  0.8
      deterministic_histogram:  true  # 确保结果可重复
      
    # CatBoost GPU参数
    cat_params:
      task_type:  GPU
      devices:  '0'
      gpu_ram_part:  0.8      # 使用80% GPU内存
      
    # LightGBM GPU参数  
    lgb_params:
      device:  gpu
      gpu_platform_id:  0
      gpu_device_id:  0
      gpu_use_dp:  false      # float32更快
      
    # 提前停止以节省时间
    early_stopping_rounds:  10
    
    # VSN配置
    use_vsn:  true
    vsn_csv:  null
    
  per_channel: 
    base:  {}
    rich:  {}

# 专家配置（与原配置相同）
experts: 
  alpha_dir_tft: 
    name:  Alpha-Dir-TFT
    pkl_base:  data/merged/expert_group/Alpha-Dir-TFT-base/full_merged_with_fundamentals_Alpha-Dir-TFT-base.pkl
    pkl_rich:  data/merged/expert_group/Alpha-Dir-TFT-rich/full_merged_with_fundamentals_Alpha-Dir-TFT-rich.pkl
    periods:  ["1h", "4h", "1d"]
    targets:  ["target_binarytrend"]

  alpha_ret_tft: 
    name:  Alpha-Ret-TFT
    pkl_base:  data/merged/expert_group/Alpha-Ret-TFT-base/full_merged_with_fundamentals_Alpha-Ret-TFT-base.pkl
    pkl_rich:  data/merged/expert_group/Alpha-Ret-TFT-rich/full_merged_with_fundamentals_Alpha-Ret-TFT-rich.pkl
    periods:  ["1h", "4h", "1d"]
    targets:  ["target_logreturn", "target_logsharpe_ratio"]

  risk_prob_tft: 
    name:  Risk-Prob-TFT
    pkl_base:  data/merged/expert_group/Risk-Prob-TFT-base/full_merged_with_fundamentals_Risk-Prob-TFT-base.pkl
    pkl_rich:  data/merged/expert_group/Risk-Prob-TFT-rich/full_merged_with_fundamentals_Risk-Prob-TFT-rich.pkl
    periods:  ["1h", "4h", "1d"]
    targets:  ["target_drawdown_prob", "target_vol_jump_prob"]

  risk_reg_tft: 
    name:  Risk-Reg-TFT
    pkl_base:  data/merged/expert_group/Risk-Reg-TFT-base/full_merged_with_fundamentals_Risk-Reg-TFT-base.pkl
    pkl_rich:  data/merged/expert_group/Risk-Reg-TFT-rich/full_merged_with_fundamentals_Risk-Reg-TFT-rich.pkl
    periods:  ["1h", "4h", "1d"]
    targets:  ["target_max_drawdown", "target_realized_vol"]

  derivatives_micro: 
    name:  MicroStruct-Deriv-TFT
    pkl_base:  data/merged/expert_group/MicroStruct-Deriv-TFT-base/full_merged_with_fundamentals_MicroStruct-Deriv-TFT-base.pkl
    pkl_rich:  data/merged/expert_group/MicroStruct-Deriv-TFT-rich/full_merged_with_fundamentals_MicroStruct-Deriv-TFT-rich.pkl
    periods:  ["1h", "4h"]
    targets:  ["target_binarytrend", "target_logreturn"]

  onchain_fundflow: 
    name:  OnChain-ETF-TFT
    pkl_base:  data/merged/expert_group/OnChain-ETF-TFT-base/full_merged_with_fundamentals_OnChain-ETF-TFT-base.pkl
    pkl_rich:  data/merged/expert_group/OnChain-ETF-TFT-rich/full_merged_with_fundamentals_OnChain-ETF-TFT-rich.pkl
    periods:  ["1h", "4h", "1d"]
    targets:  ["target_fundflow_strength"]

  regime_gating: 
    name:  Regime-Gate
    pkl_base:  data/merged/expert_group/Regime-Gate-base/full_merged_with_fundamentals_Regime-Gate-base.pkl
    pkl_rich:  data/merged/expert_group/Regime-Gate-rich/full_merged_with_fundamentals_Regime-Gate-rich.pkl
    periods:  ["1h", "4h", "1d"]
    targets:  ["target_sideway_detect"]
    skip_selection:  true

  breakout_levels: 
    name:  KeyLevel-Breakout-TFT
    pkl_base:  data/merged/expert_group/KeyLevel-Breakout-TFT-base/full_merged_with_fundamentals_KeyLevel-Breakout-TFT-base.pkl
    pkl_rich:  data/merged/expert_group/KeyLevel-Breakout-TFT-rich/full_merged_with_fundamentals_KeyLevel-Breakout-TFT-rich.pkl
    periods:  ["1h", "4h", "1d"]
    targets:  ["target_breakout_prob"]

  relative_strength: 
    name:  RelativeStrength-Spread-TFT
    pkl_base:  data/merged/expert_group/RelativeStrength-Spread-TFT-base/full_merged_with_fundamentals_RelativeStrength-Spread-TFT-base.pkl
    pkl_rich:  data/merged/expert_group/RelativeStrength-Spread-TFT-rich/full_merged_with_fundamentals_RelativeStrength-Spread-TFT-rich.pkl
    periods:  ["1h", "4h", "1d"]
    targets:  ["target_binarytrend", "target_logreturn"]

  factor_bridge: 
    name:  Factor-Bridge-TFT
    pkl_base:  data/merged/expert_group/Factor-Bridge-TFT-base/full_merged_with_fundamentals_Factor-Bridge-TFT-base.pkl
    pkl_rich:  data/merged/expert_group/Factor-Bridge-TFT-rich/full_merged_with_fundamentals_Factor-Bridge-TFT-rich.pkl
    periods:  ["1d"]
    targets:  ["target_logsharpe_ratio"]
    skip_selection:  true

# Split schemes
splits: 
  outer_val: 
    mode:  days
    days:  90
    ratio:  0.2
  inner: 
    n_splits:  5
    val_ratio:  0.2

# Time-aware permutation importance - GPU优化
permutation: 
  enabled:  true
  method:  cyclic_shift
  block_len:  36
  block_len_by_period: 
    "1h":  36
    "4h":  36
    "1d":  36
  embargo:  0
  purge:  0
  embargo_by_period:  {}
  purge_by_period:  {}
  n_estimators:  300          # 保持模型质量
  seed:  42
  group_cols:  ["symbol"]
  repeats:  5                 # 保持统计稳定性
  # GPU加速
  use_gpu:  true
  n_jobs:  4
  tree_params:
    tree_method:  hist    # XGBoost 3.0使用hist
    device:  cuda:0       # 新API
    max_bin:  256
  # 批量计算优化
  batch_size:  20             # 批量处理特征

# TFT gating
tft_gating: 
  enabled:  false
  ckpt:  checkpoints/last.ckpt
  model_config:  configs/experts/Alpha-Dir-TFT/1h/base/model_config.yaml
  weights_config:  configs/experts/Alpha-Dir-TFT/1h/base/weights_config.yaml
  max_batches:  50
  tft_bonus:  0.2
  out_csv:  reports/feature_evidence/tft_gating.csv

# Aggregation配置
aggregation: 
  weights_yaml:  null
  topk_core:  128
  topk_per_pair:  64
  min_appear_rate:  0.5
  min_appear_rate_era:  0.6
  rich_quality_weights: 
    "1h":  0.9
    "4h":  1.0
    "1d":  1.0

# Wrapper search - GPU优化
wrapper: 
  method:  rfe
  rfe: 
    patience:  10
    sample_cap:  50000
    # GPU加速
    use_gpu:  true
    n_jobs:  4
    # 批量评估优化
    batch_eval:  true
    batch_size:  10           # 一次评估10个特征组合
    # 使用缓存避免重复计算
    cache_scores:  true
  ga:
    pop:  30
    gen:  15
    cx:  0.7
    mut:  0.1
    sample_cap:  50000
    # GPU加速与并行
    use_gpu:  true
    n_jobs:  4
    # 并行评估种群
    parallel_eval:  true
    eval_batch_size:  10      # 批量评估个体
    # 多目标优化
    multi_objective:  false
    weights:
      classification:  1.0
      regression:  1.0
    seeds:  [42, 2025, 7]

# Finalization
finalize: 
  expert_only_max:  48
  max_online_latency_ms:  2000
  outputs: 
    core_summary_csv:  reports/feature_evidence/aggregated_core.csv
    core_allowlist_txt:  configs/selected_features.txt
    optimized_allowlist_txt:  reports/feature_evidence/optimized_features.txt
    plus_allowlist_txt:  reports/feature_evidence/plus_features.txt
  post_validation: 
    enabled:  true
    method:  rolling
    n_splits:  5
    val_ratio:  0.2
    min_score:  null
  documentation: 
    summary:  true
  forward_compare:
    enabled:  false

# Windows特定优化
runtime:
  # 使用spawn模式避免Windows下的fork问题
  multiprocessing_context:  spawn
  # 内存映射优化
  use_memory_mapping:  true
  # 预加载数据到GPU
  preload_gpu:  true
  # 使用混合精度加速
  mixed_precision:  true
